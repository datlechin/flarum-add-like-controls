{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@datlechin/flarum-add-like-controls/webpack/bootstrap","webpack://@datlechin/flarum-add-like-controls/webpack/runtime/compat get default export","webpack://@datlechin/flarum-add-like-controls/webpack/runtime/define property getters","webpack://@datlechin/flarum-add-like-controls/webpack/runtime/hasOwnProperty shorthand","webpack://@datlechin/flarum-add-like-controls/webpack/runtime/make namespace object","webpack://@datlechin/flarum-add-like-controls/external root \"flarum.core.compat['forum/app']\"","webpack://@datlechin/flarum-add-like-controls/external root \"flarum.core.compat['common/extend']\"","webpack://@datlechin/flarum-add-like-controls/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@datlechin/flarum-add-like-controls/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@datlechin/flarum-add-like-controls/external root \"flarum.core.compat['common/components/Button']\"","webpack://@datlechin/flarum-add-like-controls/./src/forum/index.js","webpack://@datlechin/flarum-add-like-controls/./src/forum/addMarkAsReadControls.js","webpack://@datlechin/flarum-add-like-controls/./src/forum/addLikeControls.js","webpack://@datlechin/flarum-add-like-controls/./src/forum/addIgnoreControls.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","import app from 'flarum/forum/app';\nimport addIgnoreControls from './addIgnoreControls';\nimport addLikeControls from './addLikeControls';\nimport addMarkAsReadControls from './addMarkAsReadControls';\n\napp.initializers.add('datlechin/flarum-add-like-controls', () => {\n  addMarkAsReadControls();\n  addLikeControls();\n  addIgnoreControls();\n});\n","import { extend } from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\n\nexport default function addMarkAsReadControls() {\n  extend(DiscussionControls, 'userControls', function (items, discussion, context) {\n    if (app.session.user && !(context instanceof DiscussionPage)) {\n      let currentRoute = app.current.get('routeName');\n      if (currentRoute === 'index' || currentRoute === 'following') {\n        if (discussion.isHidden()) return;\n\n        let isRead = discussion.isRead();\n\n        items.add(\n          'markAsRead',\n          Button.component(\n            {\n              icon: isRead ? 'fas fa-check-circle' : 'far fa-check-circle',\n              onclick: () => {\n                if (isRead) {\n                  discussion.save({ lastReadPostNumber: null, unread: true });\n                } else {\n                  discussion.save({ lastReadPostNumber: discussion.lastPostNumber() });\n                }\n              },\n            },\n            app.translator.trans(\n              isRead ? 'datlechin-flarum-add-like-controls.forum.mark_unread' : 'datlechin-flarum-add-like-controls.forum.mark_read'\n            )\n          )\n        );\n      }\n    }\n  });\n}\n","import { extend } from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\n\nexport default function addLikeControls() {\n  extend(DiscussionControls, 'userControls', function (items, discussion, context) {\n    if (app.session.user && !(context instanceof DiscussionPage)) {\n      let currentRoute = app.current.get('routeName');\n\n      if (currentRoute === 'index' || currentRoute === 'following') {\n        const post = discussion.firstPost();\n\n        if (!post || post.isHidden() || !('flarum-likes' in flarum.extensions)) return;\n\n        const likes = post.likes();\n\n        let isLiked = app.session.user && likes && likes.some((user) => user === app.session.user);\n\n        items.add(\n          'like',\n          Button.component(\n            {\n              icon: isLiked ? 'fas fa-thumbs-up' : 'far fa-thumbs-up',\n              onclick: () => {\n                isLiked = !isLiked;\n\n                post.save({ isLiked });\n              },\n            },\n            app.translator.trans(isLiked ? 'flarum-likes.forum.post.unlike_link' : 'flarum-likes.forum.post.like_link')\n          )\n        );\n      }\n    }\n  });\n}\n","import { extend } from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\n\nexport default function addIgnoreControls() {\n  extend(DiscussionControls, 'userControls', function (items, discussion, context) {\n    if (app.session.user && !(context instanceof DiscussionPage)) {\n      let currentRoute = app.current.get('routeName');\n\n      if (currentRoute === 'index' || currentRoute === 'following') {\n        if (discussion.isHidden()) return;\n\n        const subscription = discussion.subscription();\n\n        items.add(\n          'ignore',\n          Button.component(\n            {\n              icon: subscription === 'ignore' ? 'fas fa-eye' : 'far fa-eye-slash',\n              onclick: () => {\n                discussion.save({\n                  subscription: subscription === 'ignore' ? null : 'ignore',\n                });\n              },\n            },\n            app.translator.trans(\n              subscription === 'ignore'\n                ? 'flarum-subscriptions.forum.discussion_controls.unignore_button'\n                : 'datlechin-flarum-add-like-controls.forum.ignore'\n            )\n          )\n        );\n      }\n    }\n  });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","extend","DiscussionControls","items","discussion","context","session","user","DiscussionPage","currentRoute","current","isHidden","isRead","add","Button","icon","onclick","save","lastReadPostNumber","unread","lastPostNumber","translator","trans","post","firstPost","extensions","likes","isLiked","some","subscription"],"sourceRoot":""}